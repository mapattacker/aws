{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Guide This documentation serves as a collection of AWS guides for my own consumption. Hope it can help you in the journey to master how to use services in this dominant cloud provider.","title":"Home"},{"location":"#aws-guide","text":"This documentation serves as a collection of AWS guides for my own consumption. Hope it can help you in the journey to master how to use services in this dominant cloud provider.","title":"AWS Guide"},{"location":"boto3/","text":"Boto3 Boto3 is the AWS SDK for Python. To get started, you need to have python installed. pip install boto3 Boto3 Types Boto3 has two types of interfaces, the client and resource. The client interface is low level and provides 1-1 mapping with the AWS services' APIs, with the return responses in JSON. The resource interface is a high level API, a wrapper for the client interface so that commands are more intuitive. Below is an example to download a file from S3. import boto3 def download_file ( bucket_name , origin_blob_path , dest_filename ): \"\"\"Download blob from S3 bucket. Args: bucket_name (str) origin_blob_path (str) dest_filename (str): destination filename \"\"\" s3 = boto3 . resource ( \"s3\" ) s3_bucket = s3 . Bucket ( bucket_name ) s3 . Bucket ( bucket_name ) . download_file ( origin_blob_path , dest_filename ) However, it only exposes a subset of AWS API, so functionalities might be limited , though we can assess the client interface in the resouce too as shown below. s3 = boto3 . resource ( \"s3\" ) . meta . client ()","title":"Boto3"},{"location":"boto3/#boto3","text":"Boto3 is the AWS SDK for Python. To get started, you need to have python installed. pip install boto3","title":"Boto3"},{"location":"boto3/#boto3-types","text":"Boto3 has two types of interfaces, the client and resource. The client interface is low level and provides 1-1 mapping with the AWS services' APIs, with the return responses in JSON. The resource interface is a high level API, a wrapper for the client interface so that commands are more intuitive. Below is an example to download a file from S3. import boto3 def download_file ( bucket_name , origin_blob_path , dest_filename ): \"\"\"Download blob from S3 bucket. Args: bucket_name (str) origin_blob_path (str) dest_filename (str): destination filename \"\"\" s3 = boto3 . resource ( \"s3\" ) s3_bucket = s3 . Bucket ( bucket_name ) s3 . Bucket ( bucket_name ) . download_file ( origin_blob_path , dest_filename ) However, it only exposes a subset of AWS API, so functionalities might be limited , though we can assess the client interface in the resouce too as shown below. s3 = boto3 . resource ( \"s3\" ) . meta . client ()","title":"Boto3 Types"},{"location":"cli/","text":"AWS CLI The AWS Command Line Interface , AWS CLI for short, allows us to easily access AWS services in the terminal. Installation If you\u2019re using Amazon EC2 instances or AWS Cloud9, the tools are already installed for you. To install in your local machine, refer to this guide . Command Syntax # command syntax aws --<optional-command> <main-command> <subcommand> <parameters> # e.g. aws s3 mb s3://bucketname We can find more info in the online CLI help docs, or just type aws <optional: command> <optional: subcommand> help , e.g. aws s3 mb help if needed. Configure To make it easier to send commands without the need to enter the credentials everytime, we can set a default profile or a specific profile name with those variables. The 4 credentials are the access and secret keys , region , and output format (default is json ). AWS Configure Cmd Desc aws configure enter access, secret & region names, for default profile aws configure --profile <name> enter access, secret & region names, based on a specific name aws s3 ls --profile <name> enter commands based on profile These credentials are stored in ~/.aws/credentials .","title":"AWS CLI"},{"location":"cli/#aws-cli","text":"The AWS Command Line Interface , AWS CLI for short, allows us to easily access AWS services in the terminal.","title":"AWS CLI"},{"location":"cli/#installation","text":"If you\u2019re using Amazon EC2 instances or AWS Cloud9, the tools are already installed for you. To install in your local machine, refer to this guide .","title":"Installation"},{"location":"cli/#command-syntax","text":"# command syntax aws --<optional-command> <main-command> <subcommand> <parameters> # e.g. aws s3 mb s3://bucketname We can find more info in the online CLI help docs, or just type aws <optional: command> <optional: subcommand> help , e.g. aws s3 mb help if needed.","title":"Command Syntax"},{"location":"cli/#configure","text":"To make it easier to send commands without the need to enter the credentials everytime, we can set a default profile or a specific profile name with those variables. The 4 credentials are the access and secret keys , region , and output format (default is json ). AWS Configure Cmd Desc aws configure enter access, secret & region names, for default profile aws configure --profile <name> enter access, secret & region names, based on a specific name aws s3 ls --profile <name> enter commands based on profile These credentials are stored in ~/.aws/credentials .","title":"Configure"}]}